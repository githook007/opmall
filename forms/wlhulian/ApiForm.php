<?php
/**
 * link: https://www.opmall.com/
 * copyright: Copyright (c) 2018 hook007
 * author: opmall
 */

namespace app\forms\wlhulian;

use app\helpers\Json;
use GuzzleHttp\Client;
use yii\base\BaseObject;

class ApiForm extends BaseObject
{
    public $appId;
    public $secret;
    public $storeId;
    public $status;
    public $is_prod;
    /** @var Base */
    public $object;

    private $apiUrl;
    private $timestamp;
    private $nonce;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if(!$this->status){
            throw new \Exception('关闭了聚合配送了');
        }
        if($this->is_prod){
            $this->apiUrl = "https://openapi.wlhulian.com";
        }else {
            $this->apiUrl = "https://testapi.wlhulian.com";
        }
    }

    public function getSign(): string
    {
        $str = "{$this->secret}{$this->timestamp}{$this->nonce}";
        if($this->storeId && $this->object->supportStoreId()){
            $str .= $this->storeId;
        }
        $str .= $this->getData();
        return md5($str);
    }

    public function request(){
        $this->timestamp = $this->getMseTime();
        $this->nonce = md5(uniqid());
        $res = $this->getClient()
            ->post($this->apiUrl . $this->object->getMethodName(), ['json' => $this->getParams()]);
        return $this->object->response(Json::decode($res->getBody()->getContents()));
    }

    public function getParams(){
        $json = [
            'appId' => $this->appId,
            'sign' => $this->getSign(),
            'data' => $this->getData(),
            'timestamp' => $this->timestamp,
            'nonce' => $this->nonce,
        ];
        if($this->object->supportStoreId()){
            $json['storeId'] = $this->storeId;
        }
        return $json;
    }

    private function getData(): ?string
    {
        $data = Json::encode($this->object->getAttribute());
        return $data ?: null;
    }

    private function getMseTime(): float
    {
        list($mse, $sec) = explode(' ', microtime());
        return (float)sprintf('%.0f', (floatval($mse) + floatval($sec)) * 1000);
    }

    private function getClient($header = []): Client
    {
        return (new Client([
            'verify' => false,
            'headers' => $header
        ]));
    }
}
